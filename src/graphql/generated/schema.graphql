### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Anime {
  end_date: Date
  genres: [Genre]
  id: ID!
  main_picture: Picture!
  mean: Float
  media_type: String
  my_list_status: MyListStatusAnime
  num_episodes: Int
  num_list_users: Int
  num_scoring_users: Int
  popularity: Int
  rank: Int
  source: String
  start_date: Date
  status: String
  studios: [Studio]
  synopsis: String
  title: String!
}

enum AnimeStatus {
  completed
  dropped
  onHold
  planToWatch
  watching
}

type Author {
  first_name: String
  id: ID
  last_name: String
  role: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Genre {
  id: ID
  name: String
}

type Manga {
  authors: [Author]
  end_date: Date
  genres: [Genre]
  id: ID!
  main_picture: Picture!
  mean: Float
  media_type: String
  num_chapters: Int
  num_list_users: Int
  num_scoring_users: Int
  num_volumes: Int
  popularity: Int
  rank: Int
  start_date: Date
  status: String
  synopsis: String
  title: String!
}

enum MangaStatus {
  completed
  dropped
  onHold
  planToRead
  reading
}

type Mutation {
  getToken(code: String!): Boolean
  updateAnimeEpisodes(animeID: Int!, watchedEpisodes: Int!): Boolean
  updateAnimeStatus(animeID: Int!, status: AnimeStatus!): Boolean
  updateMangaStatus(mangaID: Int!, status: MangaStatus!): Boolean
}

type MyListStatusAnime {
  is_rewatching: Boolean
  num_episodes_watched: Int
  score: Float
  status: AnimeStatus
  updated_at: DateTime
}

type Picture {
  large: String
  medium: String
}

type Query {
  anime(animeID: Int!): Anime
  getAnimeList(status: AnimeStatus!): [Anime]
  getMangaList(status: MangaStatus!): [Manga]
  getOauthLink: String
  manga(mangaID: Int!): Manga
  me: User
}

type Studio {
  id: ID
  name: String
}

type User {
  id: ID
  joined_at: DateTime
  location: String
  name: String
  picture: String
}

/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as ContextModule from "../types"
import { core } from "@nexus/schema"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "Date";
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.ScalarInputFieldConfig<core.GetGen3<"inputTypes", TypeName, FieldName>>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  AnimeStatus: "completed" | "dropped" | "on_hold" | "plan_to_watch" | "watching"
  MangaStatus: "completed" | "dropped" | "on_hold" | "plan_to_read" | "reading"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
}

export interface NexusGenRootTypes {
  Anime: { // root type
    end_date?: NexusGenScalars['Date'] | null; // Date
    genres?: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    id: string; // ID!
    main_picture: NexusGenRootTypes['Picture']; // Picture!
    mean?: number | null; // Float
    media_type?: string | null; // String
    my_list_status?: NexusGenRootTypes['MyListStatusAnime'] | null; // MyListStatusAnime
    num_episodes?: number | null; // Int
    num_list_users?: number | null; // Int
    num_scoring_users?: number | null; // Int
    popularity?: number | null; // Int
    rank?: number | null; // Int
    source?: string | null; // String
    start_date?: NexusGenScalars['Date'] | null; // Date
    status?: string | null; // String
    studios?: Array<NexusGenRootTypes['Studio'] | null> | null; // [Studio]
    synopsis?: string | null; // String
    title: string; // String!
  }
  Author: { // root type
    first_name?: string | null; // String
    id?: string | null; // ID
    last_name?: string | null; // String
    role?: string | null; // String
  }
  Genre: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  Manga: { // root type
    authors?: Array<NexusGenRootTypes['Author'] | null> | null; // [Author]
    end_date?: NexusGenScalars['Date'] | null; // Date
    genres?: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    id: string; // ID!
    main_picture: NexusGenRootTypes['Picture']; // Picture!
    mean?: number | null; // Float
    media_type?: string | null; // String
    num_chapters?: number | null; // Int
    num_list_users?: number | null; // Int
    num_scoring_users?: number | null; // Int
    num_volumes?: number | null; // Int
    popularity?: number | null; // Int
    rank?: number | null; // Int
    start_date?: NexusGenScalars['Date'] | null; // Date
    status?: string | null; // String
    synopsis?: string | null; // String
    title: string; // String!
  }
  Mutation: {};
  MyListStatusAnime: { // root type
    is_rewatching?: boolean | null; // Boolean
    num_episodes_watched?: number | null; // Int
    score?: number | null; // Float
    status?: NexusGenEnums['AnimeStatus'] | null; // AnimeStatus
    updated_at?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Picture: { // root type
    large?: string | null; // String
    medium?: string | null; // String
  }
  Query: {};
  Studio: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  User: { // root type
    id?: string | null; // ID
    joined_at?: NexusGenScalars['DateTime'] | null; // DateTime
    location?: string | null; // String
    name?: string | null; // String
    picture?: string | null; // String
  }
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  AnimeStatus: NexusGenEnums['AnimeStatus'];
  MangaStatus: NexusGenEnums['MangaStatus'];
  String: NexusGenScalars['String'];
  Int: NexusGenScalars['Int'];
  Float: NexusGenScalars['Float'];
  Boolean: NexusGenScalars['Boolean'];
  ID: NexusGenScalars['ID'];
  Date: NexusGenScalars['Date'];
  DateTime: NexusGenScalars['DateTime'];
}

export interface NexusGenFieldTypes {
  Anime: { // field return type
    end_date: NexusGenScalars['Date'] | null; // Date
    genres: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    id: string; // ID!
    main_picture: NexusGenRootTypes['Picture']; // Picture!
    mean: number | null; // Float
    media_type: string | null; // String
    my_list_status: NexusGenRootTypes['MyListStatusAnime'] | null; // MyListStatusAnime
    num_episodes: number | null; // Int
    num_list_users: number | null; // Int
    num_scoring_users: number | null; // Int
    popularity: number | null; // Int
    rank: number | null; // Int
    source: string | null; // String
    start_date: NexusGenScalars['Date'] | null; // Date
    status: string | null; // String
    studios: Array<NexusGenRootTypes['Studio'] | null> | null; // [Studio]
    synopsis: string | null; // String
    title: string; // String!
  }
  Author: { // field return type
    first_name: string | null; // String
    id: string | null; // ID
    last_name: string | null; // String
    role: string | null; // String
  }
  Genre: { // field return type
    id: string | null; // ID
    name: string | null; // String
  }
  Manga: { // field return type
    authors: Array<NexusGenRootTypes['Author'] | null> | null; // [Author]
    end_date: NexusGenScalars['Date'] | null; // Date
    genres: Array<NexusGenRootTypes['Genre'] | null> | null; // [Genre]
    id: string; // ID!
    main_picture: NexusGenRootTypes['Picture']; // Picture!
    mean: number | null; // Float
    media_type: string | null; // String
    num_chapters: number | null; // Int
    num_list_users: number | null; // Int
    num_scoring_users: number | null; // Int
    num_volumes: number | null; // Int
    popularity: number | null; // Int
    rank: number | null; // Int
    start_date: NexusGenScalars['Date'] | null; // Date
    status: string | null; // String
    synopsis: string | null; // String
    title: string; // String!
  }
  Mutation: { // field return type
    getToken: boolean | null; // Boolean
    updateAnimeEpisodes: boolean | null; // Boolean
    updateAnimeStatus: boolean | null; // Boolean
    updateMangaStatus: boolean | null; // Boolean
  }
  MyListStatusAnime: { // field return type
    is_rewatching: boolean | null; // Boolean
    num_episodes_watched: number | null; // Int
    score: number | null; // Float
    status: NexusGenEnums['AnimeStatus'] | null; // AnimeStatus
    updated_at: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Picture: { // field return type
    large: string | null; // String
    medium: string | null; // String
  }
  Query: { // field return type
    anime: NexusGenRootTypes['Anime'] | null; // Anime
    getAnimeList: Array<NexusGenRootTypes['Anime'] | null> | null; // [Anime]
    getMangaList: Array<NexusGenRootTypes['Manga'] | null> | null; // [Manga]
    getOauthLink: string | null; // String
    manga: NexusGenRootTypes['Manga'] | null; // Manga
    me: NexusGenRootTypes['User'] | null; // User
  }
  Studio: { // field return type
    id: string | null; // ID
    name: string | null; // String
  }
  User: { // field return type
    id: string | null; // ID
    joined_at: NexusGenScalars['DateTime'] | null; // DateTime
    location: string | null; // String
    name: string | null; // String
    picture: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Anime: { // field return type name
    end_date: 'Date'
    genres: 'Genre'
    id: 'ID'
    main_picture: 'Picture'
    mean: 'Float'
    media_type: 'String'
    my_list_status: 'MyListStatusAnime'
    num_episodes: 'Int'
    num_list_users: 'Int'
    num_scoring_users: 'Int'
    popularity: 'Int'
    rank: 'Int'
    source: 'String'
    start_date: 'Date'
    status: 'String'
    studios: 'Studio'
    synopsis: 'String'
    title: 'String'
  }
  Author: { // field return type name
    first_name: 'String'
    id: 'ID'
    last_name: 'String'
    role: 'String'
  }
  Genre: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Manga: { // field return type name
    authors: 'Author'
    end_date: 'Date'
    genres: 'Genre'
    id: 'ID'
    main_picture: 'Picture'
    mean: 'Float'
    media_type: 'String'
    num_chapters: 'Int'
    num_list_users: 'Int'
    num_scoring_users: 'Int'
    num_volumes: 'Int'
    popularity: 'Int'
    rank: 'Int'
    start_date: 'Date'
    status: 'String'
    synopsis: 'String'
    title: 'String'
  }
  Mutation: { // field return type name
    getToken: 'Boolean'
    updateAnimeEpisodes: 'Boolean'
    updateAnimeStatus: 'Boolean'
    updateMangaStatus: 'Boolean'
  }
  MyListStatusAnime: { // field return type name
    is_rewatching: 'Boolean'
    num_episodes_watched: 'Int'
    score: 'Float'
    status: 'AnimeStatus'
    updated_at: 'DateTime'
  }
  Picture: { // field return type name
    large: 'String'
    medium: 'String'
  }
  Query: { // field return type name
    anime: 'Anime'
    getAnimeList: 'Anime'
    getMangaList: 'Manga'
    getOauthLink: 'String'
    manga: 'Manga'
    me: 'User'
  }
  Studio: { // field return type name
    id: 'ID'
    name: 'String'
  }
  User: { // field return type name
    id: 'ID'
    joined_at: 'DateTime'
    location: 'String'
    name: 'String'
    picture: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    getToken: { // args
      code: string; // String!
    }
    updateAnimeEpisodes: { // args
      animeID: number; // Int!
      watchedEpisodes: number; // Int!
    }
    updateAnimeStatus: { // args
      animeID: number; // Int!
      status: NexusGenEnums['AnimeStatus']; // AnimeStatus!
    }
    updateMangaStatus: { // args
      mangaID: number; // Int!
      status: NexusGenEnums['MangaStatus']; // MangaStatus!
    }
  }
  Query: {
    anime: { // args
      animeID: number; // Int!
    }
    getAnimeList: { // args
      status: NexusGenEnums['AnimeStatus']; // AnimeStatus!
    }
    getMangaList: { // args
      status: NexusGenEnums['MangaStatus']; // MangaStatus!
    }
    manga: { // args
      mangaID: number; // Int!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Anime" | "Author" | "Genre" | "Manga" | "Mutation" | "MyListStatusAnime" | "Picture" | "Query" | "Studio" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "AnimeStatus" | "MangaStatus";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Date" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: ContextModule.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}